# [ implementation ]

# [ 크로스컨트리 ]. 백준 9017번. 실버5
# https://www.acmicpc.net/problem/9017


    
'''
- 팀당 최소 6명 있어야 됨. 7명은 없음. 팀 번호 개수가 6개 이하면 --> 계산에서 제외됨.
- 점수의 합이 가장 적은 팀이 --> 우승함
- 동점의 경우, 다섯 번재 주자가 가장 빨리 들어온 경우(더 낮은 점수인 경우) --> 우승함
- 1등: 1점
  2등: 2점 
  ...
  N등: N점
'''


# ===================================================================================================================


# < 정답코드 1 >

# input
from collections import defaultdict
from collections import Counter
import sys

T = int(input())

for _ in range(T): # 테스트케이스의 수(=T개)만큼 반복하는 반복문을 시작함.
    
    N = int(input()) # 선수의 수(=N명)을 입력받음.
    
    teams = list(map(int, input().split())) # 각 선수가 속한 팀을 입력받아 변수 teams에 저장함.
    
    teams_counter = Counter(teams) # 각 팀별(=key) 선수의 수(=value)를 리스트에 저장함.
    teams_record = defaultdict(list) # 각 팀별(=key) 개별선수의 점수들이 저장된 리스트들(=value)을 담은 딕셔너리를 생성함. 
                                     # 형태: {1:[10,4, 6, 12, 16, 2], 2:[5, 7, 1, 11, 13, 2] ... }
                                     #       1번팀(=key)에 속한 6명 선수들의 개별 점수들의 집합체인 하나의 리스트(=value)
                                     #       2번팀(=key)에 속한 6명 선수들의 개별 점수들의 지합체인 하나의 리스트(=value)
                                     #       3번팀 ...
    
    score = 1 # 개별 선수의 점수를 나타내는 변수 score를 생성 및 1로 초기화
    
    for i in range(N): # 모든 팀의 총 참가선수의 수(=N명)만큼 반복하는 반복문을 시작함.
                       # 즉, 아래는 한 팀의 각 선수별 관련
        team = teams[i] # i번째 선수가 속한 팀(=teams[i])을 변수 team에 할당함.
        if teams_counter[team] < 6: # i번째 선수가 속한 팀(=key)의 선수의 수(=value)가 6보다 작으면,
            continue # 해당 선수는 자격이 없으므로, 다음 선수로 건너뜀.
                     # -파이썬의 반복문에서 continue: 반복문의 현재 단계에서의 코드 실행문을 건너뛰고, 다음 반복으로 넘어감.
                     
        teams_record[team].append(score) #  팀의 선수들 점수기록 리스트(=value)에 해당 선수의 점수(=score)를 내부원소로 추가함.
        
        score += 1 # 이제 그 다음으로 결승선 통과할 예정인 선수는 당연히 현재 선수의 점수에 +1이 된 점수를 받게 됨.
        
    min_score = sys.maxsize # -'sys.maxsize': 파이썬에서 사용할 수 있는 시스템의 최대 정수 값.
                            #                 내 컴퓨터에서의 sys.maxsize의 출력값은 '9223372036854775807'으로 조회됨.
                            #                 일반적으로, 메모리 할당 및 인덱싱과 같은 작업에서 한계를 정의할 때 사용됨.
                            # - 최소 점수를 초기화하기 위해 사용되며, 가장 큰 정수값을 나타냄.
                            #   최소 점수를 가진 팀이 우승하는 것이기 때문에,
                            #   이를 초기값으로 설정하여, 이후에 점차 내려가며 '팀별 점수의 최솟값을 갱신하는 역할'로 사용됨.
                            #   min_score에 등장하는 팀의 점수가 대체되도록 함.
    
    winner = 0 # 최종 우승팀의 팀 번호를 의미하는 변수 생성 및 초기화.
    
    for team, score_list in teams_record.items(): # 각 팀과 해당 팀 선수들의 점수가 기록된 딕셔너리를 순회함.
                                                  # 각 팀별로 점수를 계산하여 우승 팀을 찾기 위한 반복문.
        total_score = sum(score_list[:4]) # 순회 대상 해당 팀에서 상위 4명의 점수를 합산하여 순위를 결정함
        if total_score < min_score: # 현재 상위 랭크에 있는 팀과, 현재 순회 및 검토 중인 팀을 비교함. 
                                    # 만약, 현재 검토되고 있는 팀의 점수가 기존의 가장 낮은 점수를 받은 팀의 점수보다 낮다면,
            min_score = total_score # 현재 검토되고 있는 팀의 점수를 현재가지의 가장 낮은 점수를 받은 팀으로 설정하고,
            winner = team # 최종 우승팀의 팀 번호를 현재 검토 중인 팀의 팀 번호로 설정함
                          # 즉, 현재 검토 중인 팀이 우승팀이 되는 것임.
        elif total_score == min_score: # 만약, 현재 검토되고 있는 팀의 점수가 기존의 가장 낮은 점수와 동일할 경우,
            if teams_record[winner][4] > score_list[4]: # -'teams_record[winner][4]': (현재 이전의)기존의 우승 팀의 5번째 선수의 점수와
                                                        # -'score_list[4]': 현재 검토 중인 팀의 5번째 선수의 점수를 비교하여
                                                        # - 기존의 우승 팀의 5번째 선수의 점수가 현재 검토 중인 팀의 5번째 선수의 점수보다
                                                        #   더 크다면(즉, 현재 검토 중인 팀의 점수가 더 최저이기 때문에 현재 팀이 우승)
                                                        # - '리스트를 기본'값(value)'으로 하는 defaultdict 객체'에서 '값(value)'를 
                                                        #   꺼낼 때는, 아래처럼 한다.
                                                        #   e.g) print(my_dict['key1'][1]) 
                                                        #        출력값: '키 key1 의 값인 리스트'의 '인덱스 1번 원소'를 출력하는 것.

                winner = team # 현재 팀이 검토 중인 팀이 우승팀이 되는 것임.
    
    print(winner) # 우승팀의 팀 번호를 출력함.     




# ===================================================================================================================

# < 정답코드 2 >
'''
import sys
input = sys.stdin.readline
T = int(input())

for _ in range(T):


    N = int(input())
    x = input().rstrip().split()

    # 집합에 팀 종류 넣기
    team_S = set(x)
    # print(team_S)

    #팀마다 카운트 세서 6 이상이면 list에 넣기
    more6team = []
    for i in team_S:
        if x.count(i) >= 6:
            more6team.append(i)
    # print(more6team)

    scores = {}
    score = 1
    for i in x:
        if i in more6team:
            if i not in scores:
                scores[i] = [score]
                score += 1
            else:
                scores[i].append(score)
                score += 1
    # print(scores)
    y = sorted(scores.items(), key=lambda x:(sum(x[1][0:4]),x[1][4]))
    print(y[0][0])
'''

# ===================================================================================================================

    # < 정답코드 3 >
'''
    for TEST in range(int(input())):
    n = int(input())
    size = [0]*201
    res = list(map(int,input().split()))
    for x in res: size[x]+= 1
    avail = {t for t in range(201) if size[t] == 6}
    
    res = [x for x in res if x in avail]
    ranks = [[] for i in range(201)]
    for i,x in enumerate(res): ranks[x].append(i+1)
    
    def score(i):
        if not ranks[i]: return (10**18, 0)
        return (sum(ranks[i][:4]), ranks[i][4])
    print(min(range(201), key=score))
'''

# ===================================================================================================================


'''
문제
크로스 컨트리 달리기는 주자들이 자연적인 야외의 지형에 만들어진 코스를 달리는 운동 경기이다. 
경주 코스는 일반적으로 4에서 12 킬로미터이며, 숲이나 넓은 땅을 통과하는 풀과 흙으로 된 지면과 언덕과 평평한 지형을 포함한다. 
이 경기는 주자들의 개인성적을 매기고, 이를 가지고 팀의 점수를 계산한다. 

한 팀은 여섯 명의 선수로 구성되며, 팀 점수는 상위 네 명의 주자의 점수를 합하여 계산한다. 
점수는 자격을 갖춘 팀의 주자들에게만 주어지며, 결승점을 통과한 순서대로 점수를 받는다. 
이 점수를 더하여 가장 낮은 점수를 얻는 팀이 우승을 하게 된다. 여섯 명의 주자가 참가하지 못한 팀은 점수 계산에서 제외된다. 
동점의 경우에는 다섯 번째 주자가 가장 빨리 들어온 팀이 우승하게 된다.

예를 들어, 다음의 표를 살펴보자.

등수	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15
팀	A	B	C	C	A	C	B	D	A	A	C	A	C	C	A
점수	1	n/a	2	3	4	5	n/a	n/a	6	7	8	9	10	11	12
팀 B 와 D 는 선수의 수가 여섯이 아니므로, 점수를 받을 수 없다. 
팀 A 의 점수는 18 (1+4+6+7)이고, 팀 C 의 점수는 18 (2+3+5+8)이다. 
이 경우 두 팀의 점수가 같으므로 다섯 번째로 결승점을 통과한 선수를 고려한다. 
A 팀의 다섯 번째 선수의 점수가 C 팀의 다섯 번째 선수의 점수보다 적으므로 A 팀이 우승팀이 된다.
모든 선수들의 등수가 주어질 때, 우승팀을 구하는 프로그램을 작성하라. 
각 팀의 참가 선수가 여섯보다 작으면 그 팀은 점수 계산에서 제외됨을 주의하라. 
여섯 명 보다 많은 선수가 참가하는 팀은 없고, 적어도 한 팀은 참가 선수가 여섯이며, 모든 선수는 끝까지 완주를 한다고 가정한다.



입력
입력 데이터는 표준입력을 사용한다. 입력은 T 개의 테스트 케이스로 주어진다. 
입력 파일의 첫 번째 줄에 테스트 케이스의 수를 나타내는 정수 T 가 주어진다. 
두 번째 줄부터는 두 줄에 하나의 테스트 케이스에 해당하는 데이터가 주어진다. 
각 테스트 케이스의 첫 번째 줄에는 하나의 정수 N (6 ≤ N ≤ 1,000)이 주어진다.
두 번째 줄에는 팀 번호를 나타내는 N 개의 정수 t1, t2, …, tN 이 공백을 사이에 두고 주어진다.
각 팀은 1 과 M(1 ≤ M ≤ 200)사이의 정수로 표현된다.



출력
출력은 표준출력을 사용한다. 하나의 테스트 케이스에 대한 우승팀의 번호를 한 줄에 출력한다. 



예제 입력 1 
2
15
1 2 3 3 1 3 2 4 1 1 3 1 3 3 1
18
1 2 3 1 2 3 1 2 3 3 3 3 2 2 2 1 1 1



예제 출력 1 
1
3
'''

