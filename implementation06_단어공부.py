# [ implementation ]

# [ 단어 공부 ]. 백준 1157번. 브론즈
# https://www.acmicpc.net/problem/1157



A = input()







# =============================================================================================

'''
# 집합 ---> 중복 제거
word = input().upper() # 입력된 문자열들을 모두 대문자로 변환

alphabet_list = list(set(word))

cnt = [] # 각 알파벳의 등장 횟수를 담을 리스트' 생성

for i in alphabet_list:
    alphabet_count = word.count(i) # 현재 단어 i가 현재 단어에서 몇 번이나 등장하는지를 카운팅해줌.
    cnt.append(alphabet_count) # 각 모든 알파벳의 등장 횟수를 담는 리스트인 cnt에 개별 알파벳의 등장 횟수를 담음
    
    

    
    
    
if cnt.count(max(cnt)) > 1: # 단어에서 '가장 많이 등장한 알파벳의 개수'가 1개 초과인지 여부 확인.
                            # e.g) 'apppleee'의 경우, '가장 많이 등장한 알파벳은 p와 e'이고 따라서 그 '알파벳의 개수'는 2개임 
    print('?') # 그런 경우에는, '?'를 출력함
else: # 그렇지 않은 경우에는,
    print(alphabet_list[cnt.index(max(cnt))]) # '리스트 cnt'에서 '가장 많이 등장한 알파벳'의 '인덱스 번호'를 찾아서, 그것을 출력함.
                                          # max(cnt): '가장 많이 등장한 알파벳의 등장 횟수'를 통해 '그 알파벳이 무엇인지 특정하기 위함'임.
                                          # index(): '가장 많이 등장한 알파벳의 등장 횟수의 인덱스번호'를 가져오는 것.
                                          
                                          
                 
    
    
    
    


< 정답코드 1 >

word = input().upper() # 입력된 문자열들을 모두 대문자로 변환. '대문자와 소문자를 구분하지 않는다'는 조건을 만족시킴.
alphabet_list = list(set(word)) # '단어의 현재 알파벳 하나하나 리스트'를 '리스트 []'에 담아 저장.
                        # list() 함수: 다른 자료형(여기서는 집합 set)을 '리스트 자료형'으로 변환시켜줌.
                        # 중복 제거하는 집합 set
                        # 집합으로 사용자 입력으로 들어온 입력(변수 word에 담김)들 중 중복을 제거 후, 그것을 다시 리스트로 바꿔서 넣음
                        # 즉, list(set(word))는 문자열 word에서 중복을 제거한 후, 그 결과를 '리스트'로 변환시키는 것.
                            
cnt = [] # '각 알파벳의 등장 횟수'를 담을 리스트 생성.

for i in alphabet_list: # '단어의 현재 알파벳 하나하나 리스트'에서 '현재 알파벳 i'을 꺼내서
    alphabet_count = word.count(i) # '현재 알파벳 i'가 '현재 단어'에서 '몇 번 등장하는지'를 카운팅함.
                                   # count(): 문자열 안에서 찾고 싶은 문자(여기서는 i)의 개수 를 출력해줌.
                                   #          '변수.count(그 문자열 속에서 찾는 문자)'의 형식으로 사용함.
    cnt.append(alphabet_count) # '각 모든 알파벳의 등장 횟수를 담는 리스트인 cnt'에 '개별 알파벳의 등장 횟수'를 담음.
    
if cnt.count(max(cnt)) > 1: # 단어에서 '가장 많이 등장한 알파벳의 개수'가 1개 초과인지 여부 확인.
                            # e.g) 'apppleee'의 경우, '가장 많이 등장한 알파벳은 p와 e'이고 따라서 그 '알파벳의 개수'는 2개임 
    print('?') # 그런 경우에는, '?'를 출력함
else: # 그렇지 않은 경우에는,
    print(alphabet_list[cnt.index(max(cnt))]) # '리스트 cnt'에서 '가장 많이 등장한 알파벳'의 '인덱스 번호'를 찾아서, 그것을 출력함.
                                          # max(cnt): '가장 많이 등장한 알파벳의 등장 횟수'를 통해 '그 알파벳이 무엇인지 특정하기 위함'임.
                                          # index(): '가장 많이 등장한 알파벳의 등장 횟수의 인덱스번호'를 가져오는 것.
                                          #                 


'''

'''

***중요***    
아래 두 코드의 차이점
리스트 cnt

(1) 
if max(cnt) > 1:
    print(?)    
 
: 이 코드는 당신이 '리스트 cnt에서의 최대값 원소가 특정 기준 이상인지'만 알고 싶을 때 사용합니다. 
  예를 들어, 어떤 게임에서 최고 점수가 1점을 넘는지 확인하고 싶을 때 사용할 수 있습니다.   
  마치 '반에서 가장 키가 큰 학생이 150cm보다 큰지'를 보는 것과 같습니다. 
  
  
(2)    
if cnt.count(max(cnt)) > 1:
    print(?)    
    
: 이 코드는 '리스트 cnt에서의 최대값인 원소가 리스트 cnt에 몇 번 등장하는지'를 알아야 할 때 사용합니다. 
  예를 들어, 같은 최고 점수를 가진 플레이어가 여러 명인지 확인할 때 사용할 수 있습니다.
  마치 '가장 키가 큰 학생과 같은 키를 가진 학생이 한 명 이상인지'를 확인하는 것과 같습니다.  
  
'''

# =============================================================================================

'''

< 정답코드 2 >

a = input().upper()
A = list(set(a))
B = list()
for i in A:
    b = a.count(i)
    B.append(b)
if B.count(max(B)) > 1:
    print("?")
else:
    print(A[B.index(max(B))])
    
'''

# =============================================================================================



""" 
문제
알파벳 대소문자로 된 단어가 주어지면, 이 단어에서 가장 많이 사용된 알파벳이 무엇인지 알아내는 프로그램을 작성하시오. 
단, 대문자와 소문자를 구분하지 않는다.


입력
첫째 줄에 알파벳 대소문자로 이루어진 단어가 주어진다. 
주어지는 단어의 길이는 1,000,000을 넘지 않는다.


출력
첫째 줄에 이 단어에서 가장 많이 사용된 알파벳을 대문자로 출력한다. 
단, 가장 많이 사용된 알파벳이 여러 개 존재하는 경우에는 ?를 출력한다.


예제 입력 1 
Mississipi
예제 출력 1 
?
예제 입력 2 
zZa
예제 출력 2 
Z
예제 입력 3 
z
예제 출력 3 
Z
예제 입력 4 
baaa
예제 출력 4 
A


"""