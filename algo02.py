# [ 큐 ]
'''
- 선입선출(FIFO)
  가장 먼저 들어온 데이터가 가장 먼저 나가는 형식의 자료구조
- 입구와 출구가 모두 뚫려 있는 '터널'과 같은 형태로 시각화할 수 있음.

- 사실, 리스트 자료형을 사용하여 큐를 구현할 수도 있긴 하지만, 시간복잡도가 높아서 비효율적으로 작동할 수 있기에, 큐 라이브러리를 사용할 때는
  아래처럼 '라이브러리 from collections import deque' 사용하라!
- '라이브러리 deque'는 스택과 큐 자료구조의 장점을 모두 합친 것임.
'''

from collections import deque 

q = deque([1, 2, 3]) #또는 초기화하고자 할 때는 'q = deque()' 라고 해도 됨.


# < queue의 오른쪽 끝에 원소(데이터)를 추가: append(원소값) >
q.append(4) 
print(q) # 출력값: 1, 2, 3, 4


# < queue의 왼쪽 끝에 원소(데이터)를 추가: appendleft(원소값) >
q.appendleft(0)
print(q) # 출력값: 0, 1, 2, 3, 4


# < queue의 오른쪽 끝에 '리스트와 같이 여러 원소를 담고 있는 것(여기서는 iterable)'을  추가: extend(iterable) >
q.extend([5, 6, 7])
print(q) # 출력값: 0, 1, 2, 3, 4, 5, 6, 7


# < queue의 왼쪽 끝에 '리스트와 같이 여러 원소를 담고 있는 것(여기서는 iterable)'을 추가: extendleft(iterable) >
q.extendleft([-3, -2, -1])
print(q) # 출력값: -1, -2, -3, 0, 1, 2, 3, 4, 5, 6, 7
         # 위에 3개 중에 -3이 가장 먼저 들어갔으니, 그 3개 중 가장 우측에 위치한다ㅏ.
         # 위에 3개 중에 -1이 가장 나중에 들어갔으니, 그 3개 중 가장 왼쪽에 위치한다.


# < 오른쪽 끝에 있는 원소를 삭제하고, 그 삭제된 원소를 반환함: pop() >
print(q.pop()) # 출력값: 7


# < 왼쪽 끝에 있는 원소를 삭제하고, 그 삭제된 원소를 반환함: popleft() >
print(q.popleft()) # 출력값: 0


# < 특정 원소만을 삭제함: remove(원소값) >
q.remove(5)
print(q) # 출력값: -2, -3, 0, 1, 2, 3, 4, 6


# < 큐 내부의 원소를 역순으로 정렬함: reverse() >
# - 나중에 들어온 원소부터 출력하고자 할 때 사용함
# - 만약, 먼저 들어온 원소부터 출력하고자 할 때는, 당연히 그냥 print(q)만 사용함.
q.reverse()
print(q) # 출력값: 6, 4, 3, 2, 1, 0, -3, -2


# < 큐 내부의 모든 원소를 제거함: clear() >
q.clear()





# # < queue에 원소값(데이터)을 추가: put(원소값) >
# q.put('hello')
# q.put('world')

# print(q) # 출력값: 
 